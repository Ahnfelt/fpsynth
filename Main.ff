import WebServer from ff:webserver
import Sound

nodeMain(system: NodeSystem): Unit {
    Log.debug("Starting server")
    WebServer.new(system, "localhost", 8080).listen {request =>
        if(request.readPath() == "/") {
            request.writeHeader("Content-Type", "text/html; charset=UTF-8")
            request.writeText("<!doctype html>")
            request.writeText("<script type='module' src='/js/script/script/Site.run.mjs'></script>")
        } elseIf {request.readPath() == "/js/AudioWorklet.mjs"} {
            request.writeHeader("Content-Type", "text/javascript; charset=UTF-8")
            request.writeText(workletScript)
        } elseIf {request.readPath().startsWith("/js/") && !request.readPath().contains("..")} {
            request.writeHeader("Content-Type", "text/javascript; charset=UTF-8")
            request.writeText(system.assets().readText(request.readPath()))
        } else {
            request.writeStatus("404 Not found")
        }
    }
}

buildMain(system: BuildSystem) {
    let browserAssets = system.compileForBrowser(["Site.ff"])
    let assets = AssetSystem.create().addAssets("/js", browserAssets)
    system.setAssets(assets)
}

workletScript = """
import {sound_} from '/js/script/script/Sound.mjs'

class MyProcessor extends AudioWorkletProcessor {
    constructor() {
        super()
        this.phase = 0
        this.sampleRate = sampleRate
    }

    process(inputs, outputs, parameters) {
        const output = outputs[0]

        for (let channel = 0; channel < output.length; channel++) {
            const outputChannel = output[channel]
            for(let i = 0; i < outputChannel.length; i++) {
                const time = this.phase / this.sampleRate
                outputChannel[i] = sound_(time)
                this.phase++
            }
        }

        return true
    }
}

registerProcessor('custom-sound', MyProcessor)
"""
