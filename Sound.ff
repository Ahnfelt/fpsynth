sound(time: Float): Float {
    envelope(time, 1.0, triangle(time, midiC(4)), adsrEnvelope) +
    envelope(time - 1.0, 1.0, triangle(time, midiD(4)), adsrEnvelope) +
    envelope(time - 2.0, 1.0, triangle(time, midiE(4)), adsrEnvelope)
}


// Waveforms

sine(time: Float, frequency: Float): Float {
    let phase = time * frequency * 2 * Float.pi()
    phase.sin()
}

square(time: Float, frequency: Float): Float {
    let phase = time * frequency * 2 * Float.pi()
    phase.sin().sign()
}

sawtooth(time: Float, frequency: Float): Float {
    let phase = time * frequency * 2 * Float.pi()
    2 * (phase / (2 * Float.pi()) - (phase / (2 * Float.pi()) + 0.5).floor())
}

triangle(time: Float, frequency: Float): Float {
    let phase = time * frequency * 2 * Float.pi()
    2 * (2 * (phase / (2 * Float.pi()) - (phase / (2 * Float.pi()) + 0.5).floor())).abs() - 1
}


// Envelopes

envelope(time: Float, duration: Float, amplitude: Float, envelope: (Float, Float) => Float): Float {
    if(time < 0.0 || time > duration) {0.0} else {
        amplitude * envelope(time, duration)
    }
}

linearEnvelope(time: Float, duration: Float): Float {
    let half = duration / 2.0
    if(time < half) {
        time / half
    } else {
        1.0 - (time - half) / half
    }
}

adsrEnvelope(
    time: Float
    duration: Float
    attack: Float = 0.1
    decay: Float = 0.2
    sustain: Float = 0.5
    release: Float = 0.2
    sustainLevel: Float = 0.7
): Float {
    let attackTime = attack * duration
    let decayTime = decay * duration
    let releaseTime = release * duration
    let sustainEnd = duration - releaseTime
    if(time < attackTime) {
        time / attackTime
    } elseIf {time < attackTime + decayTime} {
        1.0 - (1.0 - sustainLevel) * (time - attackTime) / decayTime
    } elseIf {time < sustainEnd} {
        sustainLevel
    } else {
        sustainLevel * (1.0 - (time - sustainEnd) / releaseTime)
    }
}


// Notes (computed according to the MIDI standard)

midiC(octave: Int): Float {
    midiNote(octave, 0.0)
}

midiCs(octave: Int): Float {
    midiNote(octave, 1.0)
}

midiDb(octave: Int): Float {
    midiCs(octave)
}

midiD(octave: Int): Float {
    midiNote(octave, 2.0)
}

midiDs(octave: Int): Float {
    midiNote(octave, 3.0)
}

midiEb(octave: Int): Float {
    midiDs(octave)
}

midiE(octave: Int): Float {
    midiNote(octave, 4.0)
}

midiF(octave: Int): Float {
    midiNote(octave, 5.0)
}

midiFs(octave: Int): Float {
    midiNote(octave, 6.0)
}

midiGb(octave: Int): Float {
    midiFs(octave)
}

midiG(octave: Int): Float {
    midiNote(octave, 7.0)
}

midiGs(octave: Int): Float {
    midiNote(octave, 8.0)
}

midiAb(octave: Int): Float {
    midiGs(octave)
}

midiA(octave: Int): Float {
    midiNote(octave, 9.0)
}

midiAs(octave: Int): Float {
    midiNote(octave, 10.0)
}

midiBb(octave: Int): Float {
    midiAs(octave)
}

midiB(octave: Int): Float {
    midiNote(octave, 11.0)
}

midiNote(octave: Int, semitone: Float): Float {
    // A4 is 440 Hz, also known as pitch standard
    // Going up an octave (e.g. A4 to A5) doubles the frequency
    let note = 12 * (octave + 1) + semitone
    440.0 * pow(2.0, ((note - 69) / 12))
}


// Utility functions

pow(base: Float, exponent: Float): Float {
    Js->Math->pow(base, exponent)?
}
