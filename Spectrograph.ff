import Fft

capability Spectrograph(
    signal: Float => Float
    canvas: JsValue
    context: JsValue
    width: Int
    height: Int
)

make(
    document: JsValue
    signal: Float => Float
    width: Int
    height: Int
): Spectrograph {
    let canvas = document->createElement("canvas")
    canvas->width = "" + width
    canvas->height = "" + height
    canvas->style->display = "block"
    canvas->style->marginTop = "15px"
    let context = canvas->getContext("2d")
    Spectrograph(
        signal = signal
        canvas = canvas
        context = context
        width = width
        height = height
    )
}

extend self: Spectrograph {

    draw(time: Float) {
        self.context->clearRect(0, 0, self.width, self.height);
        self.drawSpectrum(time)
        self.drawCoordinateSystem()
    }

    drawSpectrum(time: Float) {
        let dt = 1/44000
        let samples = 0.until(self.width * 2).reverse().map {i => 
            self.signal(time - i * dt)
        }
        let spectrum = Fft.spectrum(samples)
        let c = self.context
        let h = self.height
        c->strokeStyle = "#e920a8"
        c->beginPath()
        spectrum.pairs().each {| Pair(x, a) => 
            c->moveTo(x, h)
            c->lineTo(x, h * (1 - a))
        }
        c->stroke()
    }

    drawCoordinateSystem() {
        let c = self.context
        let h = self.height - 1
        c->strokeStyle = "#6fd7e3"
        c->beginPath()
        c->moveTo(0, h)
        c->lineTo(self.width, h)
        c->stroke()
    }

}